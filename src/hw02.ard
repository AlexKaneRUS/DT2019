\import lect02 \hiding (+,*)
\open Nat \hiding (-,div) -- Здесь лежат + и *.

-- I. Задания на рекурсивные определения.

-- 1. Определите функцию if, аналогичную следующей функции:
\func if {A : \Type} (cond : Bool) (th el : A): A \elim cond
  | true => th
  | false => el
{- Haskell:
   if :: Bool -> a -> a -> a
   if True t _ = t
   if False _ e = e
-}

-- 2. Определите || через if.

\func \infixr 2 || (x y : Bool) : Bool => if x true y

-- 3. Определите возведение в степень и факториал для натуральных чисел.

\func \infixr 8 ^ (x y : Nat) : Nat \elim y
  | 0 => 1
  | suc y => x * (x ^ y)

\import Utils
\func powTest1 : 2 ^ 3 = 8 => idp
\func powTest2 : 10 ^ 6 = 1000000 => idp

\func fac (x : Nat) : Nat
  | 0 => 1
  | suc x'' \as x' => x' * fac x''

\func facTest1 : fac 5 = 120 => idp
\func facTest2 : fac 3 = 6 => idp

-- 4. Определите mod и gcd.

\func \infixl 7 == (x y : Nat) : Bool
  | zero, zero => true
  | zero, _ => false
  | suc x, suc y => x == y
  | _, _ => false

\func ==Test1 : 20 == 20 = true => idp
\func ==Test2 : 20 == 21 = false => idp

\func mod (x y : Nat) : Nat => mod' x x y
  \where
    \func mod' (s x y : Nat) : Nat \elim s
      | 0 => 0
      | suc s => if (y < x) (mod' s (x - y) y) (if (x == y) 0 x)

\func modTest1 : mod 20 4 = 0 => idp
\func modTest2 : mod 71 65 = 6 => idp

\func gcd (x y : Nat) : Nat => gcd' (if (x < y) y x) x y
  \where
    \func gcd' (s x y : Nat) : Nat \elim s
      | 0 => 0
      | suc s => if (y == 0) x (gcd' s y (mod x y))

\func gcdTest1 : gcd 5 4 = 1 => idp
\func gcdTest2 : gcd 20 105 = 5 => idp
\func gcdTest3 : gcd 99 66 = 33 => idp

-- 5. Определите (полиморфный) reverse для списков.

\func reverse {A : \Type} (l : List A) => reverse' nil l
  \where
    \func reverse' {A : \Type} (acc l : List A) : List A \elim l
      | cons x xs => reverse' (cons x acc) xs
      | nil => acc

\func reverseTest1 : reverse (cons 1 (cons 2 (cons 3 nil))) = cons 3 (cons 2 (cons 1 nil)) => idp
\func reverseTest2 : reverse {Nat} nil = nil => idp

-- 6. Реализуйте любой (but choose wisely) алгоритм сортировки. Функцию сравнения можно принимать в качестве аргумента.

\func sort {A : \Type} (l : List A) (comp : A -> A -> Bool) => sortRec' (length l) l comp
  \where {
    -- Лучше паттерн матчиться на l сразу.
    \func sortRec' {A : \Type} (s : Nat) (l : List A) (comp : A -> A -> Bool) : List A \elim s, l
      | 0, _ => nil
      | suc _, nil => nil
      | suc _, cons x nil => cons x nil
      | suc s, l => \let (left, right) => split l \in
          merge (sortRec' s left comp) (sortRec' s right comp) comp

    \func split {A : \Type} (l : List A) : \Sigma (List A) (List A) =>
      \let | len => length l
           | half => div len 2
      \in divAt l half 0 nil

      \where {
        \func divAt {A : \Type} (l : List A) (stopInd : Nat) (curInd : Nat) (acc : List A) : \Sigma (List A) (List A) \elim l
          | nil => (nil, acc)
          | cons lx lxs \as l => if (stopInd == curInd) (acc, l) (divAt lxs stopInd (curInd + 1) (cons lx acc))
      }
      
      \func length {A : \Type} (l : List A) : Nat
        | nil => 0
        | cons _ xs => length xs + 1 -- Мы же обсуждали на лекции, что лучше писать l + 1, чем 1 + l.

    \func merge {A : \Type} (l : List A) (r : List A) (comp : A -> A -> Bool) : List A \elim l, r
      | nil, y => y
      | x, nil => x
      | cons x xs \as l, cons y ys \as r => if (comp y x) (cons x (merge xs r comp)) (cons y (merge l ys comp))
}

\func sortTest1 : sort (cons 1 (cons 2 (cons 3 nil))) (<) = cons 3 (cons 2 (cons 1 nil)) => idp

\func \infix 4 > (x y : Nat) : Bool
  | 0, 0 => false
  | 0, suc y => false
  | suc x, 0 => true
  | suc x, suc y => x > y

\func sortTest2 : sort (cons 5 (cons 4 (cons 3 (cons 2 (cons 1 nil))))) (>) = cons 1 (cons 2 (cons 3 (cons 4 (cons 5 nil)))) => idp
